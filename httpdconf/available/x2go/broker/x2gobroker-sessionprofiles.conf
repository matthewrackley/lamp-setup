### X2Go Broker Session Profiles - ADAPT TO YOUR NEEDS ###

# This whole file reflects a set of examplary X2Go session profiles being
# provided via the X2Go Session Broker (backend: iniconf).

# This whole file could be the broker setup in some university institute that
# runs three server pools (pool-A, pool-B and pool-C). Though most univerities
# have real IPv4 internet addresses, we use private subnets in the examples
# below.

# The X2Go Session Broker is served into the institutes local intranet, the
# broker cannot be reached from the internet directly.

# The first section [DEFAULTS] provides a set of default profile settings that
# are common to all session profiles given in sections below.

# The other section names can be freely chosen, however, each section name has
# to be unique within this file.

# IMPORTANT: in the session profiles below you will find some lines starting
# with acl-... These lines do neither protect the X2Go Session Broker nor
# your X2Go Servers. They simply allow for selective session profile provision
# based on client address, user name and group memberships.
#
# For protecting the broker use iptables and ip6tables. For protecting your
# X2Go Servers use iptable+ip6tables and a tightened PAM configuration (e.g.
# pam_access.so). Securing X2Go Servers means securing the SSH daemon that
# runs on the X2Go Server.


[DEFAULT]
command=TERMINAL
defsndport=true
useiconv=false
iconvfrom=UTF-8
height=600
export=
quality=9
fullscreen=false
layout=
useexports=true
width=800
speed=2
soundsystem=pulse
print=true
type=auto
sndport=4713
xinerama=true
variant=
usekbd=true
fstunnel=true
applications=TERMINAL,WWWBROWSER,MAILCLIENT,OFFICE
multidisp=false
sshproxyport=22
sound=true
rootless=true
iconvto=UTF-8
soundtunnel=true
dpi=96
sshport=22
setdpi=0
pack=16m-jpeg
directrdp=false
user=BROKER_USER

[localhost-kde]
name=KDE - localhost
host=localhost
command=KDE
usebrokerpass=true

[localhost-mate]
name=MATE - localhost
host=localhost
command=MATE
usebrokerpass=true

[localhost-shadow]
name=SHADOW - localhost
# don't even try load-balancing here... it makes not sense and won't work (first given host will be used!)
host=localhost
command=SHADOW
usebrokerpass=true

### EXAMPLES: Below you find some config examples. Adapt them to your needs or
### simply write your own session profiles and remove the examples below.

##
## EXAMPLE: pool-A (staff servers)
##
## The pool-A contains three X2Go Servers (server-A, server-B and server-C).

## The staff of our example institute falls into two groups of users:
## gnome-users and kde-users.
## The gnome-users log into server-A or server-B, depending on their client
## subnet (IP configuration of the client).
## The kde-users login to server-C (server-C can be reached from the whole
## intranet).
##
## The client IP based split-up of the GNOME users allows some primitive load
## balancing.
##
## If staff people are members of both groups (kde-users, gnome-users) both
## session profiles will be shown in X2Go Client.
##

#[pool-A-server-A]
#user=
#host=server-a.pool-a.domain.local
#name=GNOME - pool-A (srv-A)
#command=GNOME
#rootless=false
#acl-groups-allow=gnome-users,admins
#acl-groups-deny=ALL
#acl-clients-deny=ALL
#acl-clients-allow=10.1.0.0/16
#acl-any-order=deny-allow
#broker-session-autologin=true

#[pool-A-server-B]
#user=
#host=server-b.pool-a.domain.local
#name=GNOME - pool-A (srv-B)
#command=GNOME
#rootless=false
#acl-groups-allow=gnome-users,admins
#acl-groups-deny=ALL
#acl-clients-deny=ALL
#acl-clients-allow=10.2.0.0/16
#acl-any-order=deny-allow
#broker-session-autologin=true

#[pool-A-server-C]
#user=
#host=server-c.pool-a.domain.local
#name=KDE - pool-A (srv-C)
#command=KDE
#rootless=false
#acl-groups-allow=kde-users,admins
#acl-groups-deny=ALL
#acl-any-order=deny-allow
#broker-session-autologin=true

##
## EXAMPLE: pool-B (e.g. webserver in the DMZ or on the internet)
##
## The pool-B is a single X2Go Server (server-D) that is
## hosted externally. The server-D has an official internet IP.
##
## The session profile for server-D shall be provided to the
## admins group only.
##
## Furthermore, the session profile for server-D shall only get
## offered to a member of the admins group if the admin is sitting
## in front of one of the admin client machines.
##

#[pool-B-server-D-LXDE]
#user=
#host=server-d (server-d.domain.internet)
#name=LXDE - srv-D
#command=LXDE
#rootless=false
#acl-groups-allow=admins
#acl-groups-deny=ALL
## make sure hostnames in client ACLs are resolvable via libnss!!!
#acl-clients-deny=ALL
#acl-clients-allow=admin-machine1.domain.local, admin-machine2.domain.local, admin-machine3.domain.local
#acl-any-order=deny-allow

##
## EXAMPLE: pool-C (REAL LOAD BALANCING!!!)
##
## The pool-C is a server pool for students. Our example institute
## knows 200-300 students and has to offer working places for
## every student.
##
## The resource limits on these servers are pretty strict, so staff members
## normally stay away from these machines, anyway. Only two test account
## get this session profile into their X2Go Clients.
##
## The pool-C contains 6 X2Go Servers that serve all students users together
## as a load balance server farm. The servers' hostnames are s-E1, s-E2, ...
## (as found in /etc/hostname). The hosts, however, are not configured in DNS
## so we give their IPs explicitly (also works for IPv6).
##
## Make sure to install x2gobroker-agent on all these 6 X2Go Servers. Also make
## sure to once run the script x2gobroker-keygen on the broker host and once
## the script x2gobroker-pubkeyauthorizer per X2Go Server.
##
## All 6 X2Go Servers have to be configured to use the PostgreSQL X2Go session
## DB backend.
##

#[pool-C-XFCE]
#user=
#host=s-E1 (10.0.2.11),s-E2 (10.0.2.12),s-E3 (10.0.2.13),s-E4 (10.0.2.14),s-E5 (10.0.2.15)
#name=XFCE - pool-C
#command=XFCE
#rootless=false
#acl-users-allow=testuser-A,testuser-B
#acl-users-deny=ALL
#acl-groups-allow=students,admins
#acl-groups-deny=ALL
#acl-any-order=deny-allow
# this server pool has a special broker setup for SSH authorized_keys
#broker-session-autologin=true
#broker-authorized-keys=/var/lib/x2gobroker/ssh/%u/authorized_keys
