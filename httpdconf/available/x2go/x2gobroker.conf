# This file is part of the  X2Go Project - https://www.x2go.org
# Copyright (C) 2012-2020 by Mike Gabriel <mike.gabriel@das-netzwerkteam.de>
#
# X2Go Session Broker is free software; you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# X2Go Session Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

###
### GLOBAL section
###

[global]

# Allow unauthenticated connections? Then set both require-password and require-cookie to false.

# Verify username/password combination sent by client
#require-password = true

# To secure server-client communication the client can start the communication
# with a pre-set, agreed on authentication ID. Set the below value to true
# to make the X2Go Session Broker require this feature
#require-cookie = false

# X2Go supports two different cookie authentication modes (static and dynamic).
# Dynamic cookies send new cookie to client on every request.  This could possibly
# cause issues if a client ever tries multiple requests at the same time.
#use-static-cookie = false

# Once a client is authenticated their password is not revalidated until this
# many seconds have elapsed from their initial authentication.
#auth-timeout = 36000

# Client cookies (both static and dynamic) must be stored as local files.
# This is the directory where those files will be stored.  Please make sure
# the permissions are set to allow the x2go broker process to write to this directory
#cookie-directory = '/var/lib/x2gobroker/cookies'

# Pre and Post authentication scripts give you the option to run outside scripts
# or adjust the values of variables for users logging in.  Pre scripts run just
# before user authentication and Post scripts run just after even if authentication fails.
# Select Session scripts run after load balancing right before the chosen server is sent
# to the client.
#
# Set to list of scripts, comma seperated, with no spaces between.
#pre_auth_scripts =
#post_auth_scripts =
#select_session_scripts =

# Every server-client communication (between X2Go Client and broker)
# has to be accompanied by this initial authentication cookie if require-cookie
# is set above. This should be in the format of a UUID.
#my-cookie = xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx

# More secure...  As this x2gobroker.conf file has 0644 file permissions,
# all users with SSH access to this broker server can view this x2gobroker.conf
# file and thus, the value for 'my-cookie' is exposed.
#
# By storing the authentication cookie/ID in a separate file, you get the chance
# of securing the cookie from other users that have access to the broker machine.
#
# When running X2Go Session Broker as http daemon, then setting the
# x2gobroker.authid file readable only by members of the $X2GO_DAEMON_GROUP
# (normally POSIX group "x2gobroker") should suffice:
#
#   $ chown :x2gobroker /etc/x2go/broker/x2gobroker.authid
#   $ chmod 0640 /etc/x2go/broker/x2gobroker.authid
#
# If you use the 'my-cookie-file' parameter below, then it supersedes the 'my-cookie'
# UUID hash from above.
#my-cookie-file = /etc/x2go/broker/x2gobroker.authid

# By default the broker will pin user sessions to the IP address from which they
# origionally authenticate.  If you would like to skip that check set this to false.
#verify-ip = true

# X2Go Session Broker knows about two output formats: a text/plain based output
# and a text/json based output that is compatible with UCCS. The different outputs
# run under different URLs.

# enable {base_url}/plain/
#enable-plain-output = true

# enable {base_url}/json/
#enable-json-output = true

# enable {base_url}/uccs/
#enable-uccs-output = false

# use this URL base to create URL field in UCCS-style JSON output
#my-uccs-url-base = http://localhost:8080/

# default authentication mechanism for all broker backends
# Available auth mechs: pam, none, https_get
#default-auth-mech = pam

# how does this X2Go Session Broker instance retrieve user and group
# information from the system? (defaults for all broker backends)
# Available user/group db backends: libnss
#default-user-db = libnss
#default-group-db = libnss

# on large deployments it is recommended to ignore primary group
# memberships traversing into all user accounts for primary group
# detection can be quite CPU intensive on the X2Go Broker server.
#ignore-primary-group-memberships = true

# X2Go session autologin via X2Go Session Broker
#
# Once authenticated against the session
# broker, the user becomes a trusted user. That is, the X2Go session login can
# be automatized by a very temporary SSH pub/priv key pair. Prior to the session
# login the key is generated, after successful session login, the key is dropped
# immediately.
#
# This option can be overridden by the session profile parameter
# broker-session-autologin={true|false}
#default-session-autologin=false

# X2Go's authorized_keys file for broker mediated autologin sessions
#
# For the X2Go auto-login via X2Go Session Broker feature to work thoroughly,
# the X2Go Session Broker has to place the temporary public SSH key into the
# user's home directory. It is not recommended to use SSH's default
# authorized_keys file for this but a separate and X2Go-specific authorized_keys
# file ($HOME/.x2go/authorized_keys).
#
# Of course, the SSH daemon has to be made aware of this. This can be configured
# in /etc/ssh/sshd_config like this (older SSH server versions):
#
#    --- /etc/ssh/sshd_config.no-x2go        2013-03-01 09:57:04.000000000 +0100
#    +++ /etc/ssh/sshd_config        2013-03-01 09:56:57.000000000 +0100
#    @@ -28,7 +28,8 @@
#
#    RSAAuthentication yes
#    PubkeyAuthentication yes
#    AuthorizedKeysFile     %h/.ssh/authorized_keys
#   +AuthorizedKeysFile2    %h/.x2go/authorized_keys
#
#    # Don't read the user's ~/.rhosts and ~/.shosts files
#    IgnoreRhosts yes
#
# or like this (more recent SSH server versions):
#
#    --- /etc/ssh/sshd_config.no-x2go        2013-03-01 09:57:04.000000000 +0100
#    +++ /etc/ssh/sshd_config        2013-03-01 09:56:57.000000000 +0100
#    @@ -28,7 +28,7 @@
#
#    RSAAuthentication yes
#    PubkeyAuthentication yes
#   -AuthorizedKeysFile     %h/.ssh/authorized_keys
#   +AuthorizedKeysFile     %h/.ssh/authorized_keys %h/.x2go/authorized_keys
#
#    # Don't read the user's ~/.rhosts and ~/.shosts files
#    IgnoreRhosts yes
#
# This option can be overridden by the session profile parameter
# broker-authorized-keys=<file-location>
#
# In the given path name for the authorized_keys file, you can use these
# substitutions:
#
#  %h -> <home-directory-of-the-user-an-agent-tasks-runs-for>
#  %u -> <username-of-the-user-an-agent-tasks-runs-for>
#  %U -> <uidNumber-of-the-user-an-agent-tasks-runs-for>
#  %G -> <primary-gidNumber-of-the-user-an-agent-tasks-runs-for>
#  %% -> <the-%-character>
#default-authorized-keys=%h/.x2go/authorized_keys

# X2Go Session Broker can also mediate logins to SSH proxy servers
#
# The authorized_keys file location on SSH proxy servers
# for temporarily deploying SSH pubkey strings can be configured
# below.
#
# This option can be overridden by the session profile parameter
# broker-sshproxy-authorized-keys=<file-location>
#default-sshproxy-authorized-keys=%h/.x2go/authorized_keys

# X2Go Broker Agent query mode
#
# The X2Go Broker Agent is needed for multi-server sites configured for
# load balancing. Multi-server sites require a setup that uses the
# PostgreSQL X2Go session DB backend. The X2Go Broker Agent has to be installed
# on the local system (mode: LOCAL) or on all X2Go Servers (mode: SSH) in a
# multi-server farm.
#
# So, there are three query modes for the X2GO Broker Agent: NONE, LOCAL and
# SSH.
#
#    NONE  - Try to get along without X2Go Broker Agent queries. For simple
#            broker setups this may suffice. For load-balancing or reliable
#            session suspending and resuming the broker agent is a must!!!
#
#    LOCAL - This LOCAL mode only works for _one_ configured multi-server farm.
#            If this X2Go Session Broker is supposed to serve many different
#            multi-server farms, then the LOCAL mode will not work!!!
#
#            How it works: Assume that the local system has an X2Go Broker Agent
#            that knows about the multi-server setup. This means: X2Go Server
#            has to be installed locally and the X2Go Server has to be
#            configured to use the multi-server farm's PostgreSQL session DB
#            backend.
#
#            The local system that is running the broker does not necessarily
#            have to be a real application server. It only has to be aware of
#            running/suspended sessions within the X2Go multi-server farm setup.
#
#            A typical use-case is X2Go on top of a Debian Edu Terminal-Server
#            farm:
#
#              TJENER -> PostgreSQL DB, X2Go Server, X2Go Session Broker +
#                  Broker Agent
#              TS01 - TS0X -> X2Go Server configured to use the PostgreSQL DB
#                  on TJENER
#
#    SSH   - The more generic approach, but also more complex. It allows that
#            the broker on this system may serve for many different X2Go Server
#            multi-server setups.
#
#            With the SSH agent query mode, the X2Go Session Broker will query
#            one of the X2Go Servers in the targeted multi-server setup (through
#            SSH). The SSH authentication is done by a system user account
#            (normally UID=x2gobroker) and SSH pub/priv key authentication has
#            to be configured to make this work.
#
#            All X2Go Servers in a multi-server farm need the X2Go Broker Agent
#            installed, whereas this local system running the X2Go Session
#            Broker does not need a local X2Go Broker Agent at all.
#
# The agent query mode can be configured on a per-broker-backend basis, the
# below value is the default.
#default-agent-query-mode=NONE

# X2Go Broker's Host Key Policy (if agent query mode is 'SSH')
#
# If X2Go Broker's agent query mode is SSH, the system needs to handle
# X2Go Server side's SSH host keys in a secure and verifyable manner.
#
# The agent-hostkey-policy is the default policy to be used and can be
# either AutoAddPolicy, WarningPolicy, or RejectPolicy. The policy names
# match the corresponding class names in Paramiko SSH.
#
# IMPORTANT: As RejectPolicy is the only safe default, please be aware that
# on fresh X2Go Broker setups, SSH agent queries will always fail, until a
# properly maintained ~x2gobroker/.ssh/known_hosts file is in place.
#
# There are two simple ways to create this known_hosts file:
#
# (a) su - x2gobroker -c "ssh -o HostKeyAlgorithms=ssh-rsa <x2goserver>"
#
#     On the command line, you get prompted to confirm the remote
#     X2Go server's  Follow OpenSSH interactive dialog for accepting
#     the remote host's host key.
#
#     You will see an error coming from x2gobroker-agent.pl which can be
#     ignored. The important part is that you accepted the X2Go Server's
#     host key.
#
# (b) x2gobroker-testagent --add-to-known-hosts --host <x2goserver>
#
#     This command will populate the known_hosts file with the remote
#     X2Go server's hostkey while trying to hail its X2Go Broker Agent
#     The host key's fingerprint will not be shown on stdout and there
#     will be no interactive confirmation (patches welcome!!!).
#     If unsure about this, use approach (a) given above.
#
#default-agent-hostkey-policy=RejectPolicy

# Probe SSH port of X2Go Servers (availability check)
#
# Just before offering an X2Go Server address to a broker client, the
# X2Go Broker host can probe the X2Go Server's SSH port. In load balancing
# setups this assures that the offered X2Go Server is really up and running.
#
# However, this requires that the broker host can SSH into the X2Go server
# (this may not be the case in all thinkable firewall setups).
#
# Per default, we set this to "true" here. The portscan feature can be
# deactivated on a per-session-profile basis (use: broker-portscan-x2goservers =
# false in the session profile configuration).
#default-portscan-x2goservers = true

# Use load checker for querying X2Go Servers' loads in regular intervals
#
# When load-balancing shall be used, the simplest way to detect "server load"
# is counting the numbers of running and suspended sessions. No extra daemon
# nor service is required for this.
#
# However, simply counting running and suspended sessions per X2Go Server
# as a representative for the server load can be highly inaccurate. A better
# approach is checking each X2Go Server's load in regular intervals by a
# separate daemon (running on the broker host) and querying this load checker
# service before selecting the best server on session startup requests.
#
# The load factor calculation uses this algorithm:
#
#                  ( memAvail/1000 ) * numCPUs * typeCPUs
#    load-factor = -------------------------------------- + 1
#                        loadavg*100 * numSessions
#
# (memAvail in MByte, typeCPUs in MHz, loadavg is (system load *100 + 1) as
# positive integer value)
#
# The higher the load-factor, the more likely that a server will be chosen
# for the next to be allocated X2Go session.
#
# If you set the default-use-load-checker option here, the queries to the
# x2gobroker-loadchecker daemon will be performed for all broker backends by
# defaults.
#
# The x2gobroker-loadchecker only gets consulted, if:
#
#   o if enabled here for all backends
#   o or if enabled on a per broker backend basis (see below)
#   o or if enabled per session profile (broker-use-load-checker = true)
#
# and
#
#   o the session profile defines more than one host
#   o the session profile does not block queries to the load checker daemon
#     on a per profile basis (broker-use-load-checker = false)
#
#default-use-load-checker = false

# If the x2gobroker-loadchecker daemon gets used, define here how
# many seconds to sleep between cycles of querying system load from the
# associated X2Go Servers.
#
#load-checker-intervals = 300


###
### Auth Mechs section
###

#[authmech_pam]
# no configurable options for this authentication mechanism

#[authmech_https_get]
#host = my.webserver.com
#path = /auth/index.html
#port = 443


###
### BACKEND section
###

# Possible X2Go Session Broker backends:
#
# 1. backend = zeroconf (activated by default)
# Use the ZeroConf X2Go Session Broker backend, this backend is for demo only
# and only operates on localhost. Make sure you have x2gobroker-daemon and
# and x2goserver installed on the same machine. No need to install
# x2gobroker-agent.

# 2. backend = infile (deactivated by default)
# The IniFile X2Go Session Broker backend is for providing session profiles
# to multiple users/clients on a text config file basis (.ini file format).
#
# The session profile setup is accomplished by an extra configuration file,
# by default named /etc/x2go/broker/x2gobroker-sessionproiles.conf.
#
# For small-scale deployments the IniFile backend is the recommended backend.

[broker_zeroconf]
#enable = false
#auth-mech = pam
#user-db = libnss
#group-db = libnss
#desktop-shell = KDE

[broker_inifile]
#enable = true
#session-profiles = /etc/x2go/broker/x2gobroker-sessionprofiles.conf
#use-load-checker = false

#[broker_ldap] -> MUSIC OF THE FUTURE
#enable = false
#auth-mech = ldap
#user-db = ldap
#group-db = ldap
#uri = ldap://localhost:389
#base = dc=example,dc=org
#user-search-filter = (&(objectClass=posixAccount)(uid=*))
#host-search-filter = (&(objectClass=ipHost)(serial=X2GoServer)(cn=*))
#group-search-filter = (&(objectClass=posifxGroup)(cn=*))
#starttls = false
#agent-query-mode = SSH
#use-load-checker = true

